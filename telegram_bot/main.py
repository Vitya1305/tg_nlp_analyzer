import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from telegram_bot import keyboards
from model_training import ai

TOKEN = "7858597411:AAFtGw0O3KLLLptoFs3yxgJ7a019iASgaDA" # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º
ai.model_names = ['tz', 'another model']    # tz - –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ –¥–∞–Ω–Ω–æ–º –ø–æ —Ç–∑; another model - –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ https://www.kaggle.com/datasets/simaanjali/emotion-analysis-based-on-text
default_model = 'tz'
start_text = '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞!'
text_info = '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç üòâ\n–¢–∞–∫ –∂–µ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å: /choose –ª–∏–±–æ –∫–Ω–æ–ø–∫–µ "–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å"\n–ü–æ–ª—É—á–∏—Ç—å –≤–Ω–æ–≤—å —ç—Ç—É –ø–æ–¥—Å–∫–∞–∑–∫—É: /info –ª–∏–±–æ –∫–Ω–æ–ø–∫–æ–π "–û –±–æ—Ç–µ"'

bot = Bot(token=TOKEN)
dp = Dispatcher()

async def main():
    #await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

@dp.startup()
async def on_startup():
    print('Done!')

@dp.message(CommandStart())
async def start(msg: types.Message):
    await msg.answer_sticker('CAACAgIAAxkBAANzZhJ4OrrcU5f5LOYlC7Huqac6Pg4AAtgPAAJI8mBLFfvE2nh0a5g0BA')
    await msg.answer(start_text, reply_markup=keyboards.main)
    await msg.answer(text_info)

@dp.message(Command('choose'))
async def choose_model_command(msg: types.Message):
    await msg.answer("–í—ã–±–µ—Ä–µ—Ç–µ –º–æ–¥–µ–ª—å", reply_markup=keyboards.generate_inlineKeyboard(ai.model_names))

@dp.message(Command('info'))
async def info_command(msg: types.Message):
    print(await bot.get_my_commands())
    await msg.answer(text_info)

@dp.message(F.text == '–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å')
async def choose_model(msg: types.Message):
    await msg.answer("–í—ã–±–µ—Ä–µ—Ç–µ –º–æ–¥–µ–ª—å", reply_markup=keyboards.generate_inlineKeyboard(ai.model_names))

@dp.message(F.text == '–û –±–æ—Ç–µ')
async def info(msg: types.Message):
    await msg.answer(text_info)

@dp.callback_query(F.data.in_(ai.model_names))
async def callbacks_on_select_theme(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(f'–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ "{callback.data}"' if ai.init(callback.data) else 'Error :<')


@dp.message()
async def allQuest(msg: types.Message):
    input_text = msg.text
    anal = ai.analyse(input_text)

    await msg.answer(anal)
    print(anal, input_text)


if __name__ == '__main__':
    ai.init(default_model)
    asyncio.run(main())